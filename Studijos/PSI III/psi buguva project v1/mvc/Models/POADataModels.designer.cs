#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvc.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using Castle.Components.Validator;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="POA")]
	public partial class POADataModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    partial void InsertWorkerStatus(WorkerStatus instance);
    partial void UpdateWorkerStatus(WorkerStatus instance);
    partial void DeleteWorkerStatus(WorkerStatus instance);
    #endregion
		
		public POADataModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["POAConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public POADataModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POADataModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POADataModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POADataModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<WorkerStatus> WorkerStatus
		{
			get
			{
				return this.GetTable<WorkerStatus>();
			}
		}
	}
	
	[Table(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _headmaster_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private string _title;
		
		private EntitySet<Worker> _Workers;
		
		private EntityRef<User> _User;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onheadmaster_idChanging(System.Nullable<int> value);
    partial void Onheadmaster_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public Department()
		{
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			this._User = default(EntityRef<User>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_headmaster_id", DbType="Int")]
		public System.Nullable<int> headmaster_id
		{
			get
			{
				return this._headmaster_id;
			}
			set
			{
				if ((this._headmaster_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onheadmaster_idChanging(value);
					this.SendPropertyChanging();
					this._headmaster_id = value;
					this.SendPropertyChanged("headmaster_id");
					this.Onheadmaster_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Association(Name="Department_Worker", Storage="_Workers", ThisKey="id", OtherKey="department_id")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[Association(Name="User_Department", Storage="_User", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Worker_Department", Storage="_Worker", ThisKey="headmaster_id", OtherKey="id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._headmaster_id = value.id;
					}
					else
					{
						this._headmaster_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _project_manager_id;
		
		private string _title;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<User> _User;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_manager_idChanging(System.Nullable<int> value);
    partial void Onproject_manager_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    #endregion
		
		public Project()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._User = default(EntityRef<User>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_project_manager_id", DbType="Int")]
		public System.Nullable<int> project_manager_id
		{
			get
			{
				return this._project_manager_id;
			}
			set
			{
				if ((this._project_manager_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_manager_idChanging(value);
					this.SendPropertyChanging();
					this._project_manager_id = value;
					this.SendPropertyChanged("project_manager_id");
					this.Onproject_manager_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(MAX)")]
        [ValidateNonEmpty("Projekto kodas negali būti paliktas tuščias")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Association(Name="Project_Task", Storage="_Tasks", ThisKey="id", OtherKey="project_id")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="User_Project", Storage="_User", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Worker_Project", Storage="_Worker", ThisKey="project_manager_id", OtherKey="id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._project_manager_id = value.id;
					}
					else
					{
						this._project_manager_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[Table(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _project_id;
		
		private int _project_participant_id;
		
		private int _year;
		
		private int _month;
		
		private int _worked_hours;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_idChanging(int value);
    partial void Onproject_idChanged();
    partial void Onproject_participant_idChanging(int value);
    partial void Onproject_participant_idChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnmonthChanging(int value);
    partial void OnmonthChanged();
    partial void Onworked_hoursChanging(int value);
    partial void Onworked_hoursChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    #endregion
		
		public Task()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_project_id", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Būtina nurodyti projektą, kuriam priklauso užduotis")]
		public int project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[Column(Storage="_project_participant_id", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Būtina nurodyti darbuotoją, kuriam priklauso užduotis")]
		public int project_participant_id
		{
			get
			{
				return this._project_participant_id;
			}
			set
			{
				if ((this._project_participant_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_participant_idChanging(value);
					this.SendPropertyChanging();
					this._project_participant_id = value;
					this.SendPropertyChanged("project_participant_id");
					this.Onproject_participant_idChanged();
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Būtina nurodyti metus")]
        [ValidateInteger("Metai turi būti skaičius")]
        [ValidateRange(0, 3000, "Metai turi būti intervale tarp 0 ir 3000")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[Column(Storage="_month", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Būtina nurodyti mėnesį")]
        [ValidateInteger("Mėnuo turi būti skaičius")]
        [ValidateRange(1, 12, "Mėnuo turi būti intervale tarp 1 ir 12")]
		public int month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[Column(Storage="_worked_hours", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Būtina nurodyti išdirbtas valandas")]
        [ValidateInteger("Valandos turi būti sveikas skaičius")]
        [ValidateRange(0, 744, "Valandos privavo būti intervale 0..744")]
		public int worked_hours
		{
			get
			{
				return this._worked_hours;
			}
			set
			{
				if ((this._worked_hours != value))
				{
					this.Onworked_hoursChanging(value);
					this.SendPropertyChanging();
					this._worked_hours = value;
					this.SendPropertyChanged("worked_hours");
					this.Onworked_hoursChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Association(Name="Project_Task", Storage="_Project", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._project_id = value.id;
					}
					else
					{
						this._project_id = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[Association(Name="User_Task", Storage="_User", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Worker_Task", Storage="_Worker", ThisKey="project_participant_id", OtherKey="id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._project_participant_id = value.id;
					}
					else
					{
						this._project_participant_id = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login_name;
		
		private string _password;
		
		private int _level;
		
		private System.Nullable<int> _worker_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Worker> _Workers;
		
		private EntitySet<WorkerStatus> _WorkerStatus;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onlogin_nameChanging(string value);
    partial void Onlogin_nameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void Onworker_idChanging(System.Nullable<int> value);
    partial void Onworker_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    #endregion
		
		public User()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			this._WorkerStatus = new EntitySet<WorkerStatus>(new Action<WorkerStatus>(this.attach_WorkerStatus), new Action<WorkerStatus>(this.detach_WorkerStatus));
			this._User1 = default(EntityRef<User>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_login_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
        [ValidateNonEmpty("Vartotojo vardas negali būti tuščias")]
        [ValidateLength(4, 50, "Vartotojo vardas negali būti trumpesnis nei 4 simboliai ir ilgesnis kaip 50 simbolių")]
		public string login_name
		{
			get
			{
				return this._login_name;
			}
			set
			{
				if ((this._login_name != value))
				{
					this.Onlogin_nameChanging(value);
					this.SendPropertyChanging();
					this._login_name = value;
					this.SendPropertyChanged("login_name");
					this.Onlogin_nameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
        [ValidateNonEmpty("Slaptažodis negali būti tuščias")]
        [ValidateLength(4, 50, "Slaptažodis negali būti trumpesnis nei 4 simboliai ir ilgesnis kaip 50 simbolių")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
        [ValidateNonEmpty("Lygis negali būti paliktas neužpildytas")]
        [ValidateInteger("Lygis turi būti skaičius")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[Column(Storage="_worker_id", DbType="Int")]
		public System.Nullable<int> worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Association(Name="User_Department", Storage="_Departments", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[Association(Name="User_Project", Storage="_Projects", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[Association(Name="User_Task", Storage="_Tasks", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="User_User", Storage="_Users", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="User_Worker", Storage="_Workers", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[Association(Name="User_WorkerStatus", Storage="_WorkerStatus", ThisKey="id", OtherKey="deleted_by_id")]
		public EntitySet<WorkerStatus> WorkerStatus
		{
			get
			{
				return this._WorkerStatus;
			}
			set
			{
				this._WorkerStatus.Assign(value);
			}
		}
		
		[Association(Name="User_User", Storage="_User1", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[Association(Name="Worker_User", Storage="_Worker", ThisKey="worker_id", OtherKey="id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._worker_id = value.id;
					}
					else
					{
						this._worker_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WorkerStatus(WorkerStatus entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WorkerStatus(WorkerStatus entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Workers")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _surname;
		
		private System.Nullable<int> _department_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<User> _Users;
		
		private EntitySet<WorkerStatus> _WorkerStatus;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void Ondepartment_idChanging(System.Nullable<int> value);
    partial void Ondepartment_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    #endregion
		
		public Worker()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._WorkerStatus = new EntitySet<WorkerStatus>(new Action<WorkerStatus>(this.attach_WorkerStatus), new Action<WorkerStatus>(this.detach_WorkerStatus));
			this._Department = default(EntityRef<Department>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
        [ValidateNonEmpty("Vardas negali būti paliktas tuščias")]     
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
        [ValidateNonEmpty("Pavardė negali būti tuščia")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[Column(Storage="_department_id", DbType="Int")]
		public System.Nullable<int> department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Association(Name="Worker_Department", Storage="_Departments", ThisKey="id", OtherKey="headmaster_id")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[Association(Name="Worker_Project", Storage="_Projects", ThisKey="id", OtherKey="project_manager_id")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[Association(Name="Worker_Task", Storage="_Tasks", ThisKey="id", OtherKey="project_participant_id")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Worker_User", Storage="_Users", ThisKey="id", OtherKey="worker_id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Worker_WorkerStatus", Storage="_WorkerStatus", ThisKey="id", OtherKey="worker_id")]
		public EntitySet<WorkerStatus> WorkerStatus
		{
			get
			{
				return this._WorkerStatus;
			}
			set
			{
				this._WorkerStatus.Assign(value);
			}
		}
		
		[Association(Name="Department_Worker", Storage="_Department", ThisKey="department_id", OtherKey="id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._department_id = value.id;
					}
					else
					{
						this._department_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="User_Worker", Storage="_User", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_WorkerStatus(WorkerStatus entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_WorkerStatus(WorkerStatus entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
	
	[Table(Name="dbo.WorkerStatus")]
	public partial class WorkerStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _worker_id;
		
		private int _year;
		
		private int _month;
		
		private int _status;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private EntityRef<User> _User;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onworker_idChanging(int value);
    partial void Onworker_idChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnmonthChanging(int value);
    partial void OnmonthChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    #endregion
		
		public WorkerStatus()
		{
			this._User = default(EntityRef<User>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_worker_id", DbType="Int NOT NULL")]
		public int worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[Column(Storage="_month", DbType="Int NOT NULL")]
		public int month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Association(Name="User_WorkerStatus", Storage="_User", ThisKey="deleted_by_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WorkerStatus.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WorkerStatus.Add(this);
						this._deleted_by_id = value.id;
					}
					else
					{
						this._deleted_by_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Worker_WorkerStatus", Storage="_Worker", ThisKey="worker_id", OtherKey="id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.WorkerStatus.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.WorkerStatus.Add(this);
						this._worker_id = value.id;
					}
					else
					{
						this._worker_id = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
