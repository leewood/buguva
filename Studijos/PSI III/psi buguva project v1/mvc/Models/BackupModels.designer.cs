#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvc.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="POA")]
	public partial class BackupModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBackupDepartment(BackupDepartment instance);
    partial void UpdateBackupDepartment(BackupDepartment instance);
    partial void DeleteBackupDepartment(BackupDepartment instance);
    partial void InsertBackupProject(BackupProject instance);
    partial void UpdateBackupProject(BackupProject instance);
    partial void DeleteBackupProject(BackupProject instance);
    partial void InsertBackupUser(BackupUser instance);
    partial void UpdateBackupUser(BackupUser instance);
    partial void DeleteBackupUser(BackupUser instance);
    partial void InsertBackupWorker(BackupWorker instance);
    partial void UpdateBackupWorker(BackupWorker instance);
    partial void DeleteBackupWorker(BackupWorker instance);
    partial void InsertBackupWorkerStatus(BackupWorkerStatus instance);
    partial void UpdateBackupWorkerStatus(BackupWorkerStatus instance);
    partial void DeleteBackupWorkerStatus(BackupWorkerStatus instance);
    partial void InsertBackupTask(BackupTask instance);
    partial void UpdateBackupTask(BackupTask instance);
    partial void DeleteBackupTask(BackupTask instance);
    #endregion
		
		public BackupModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["POAConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BackupModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackupModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackupModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackupModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BackupDepartment> BackupDepartments
		{
			get
			{
				return this.GetTable<BackupDepartment>();
			}
		}
		
		public System.Data.Linq.Table<BackupProject> BackupProjects
		{
			get
			{
				return this.GetTable<BackupProject>();
			}
		}
		
		public System.Data.Linq.Table<BackupUser> BackupUsers
		{
			get
			{
				return this.GetTable<BackupUser>();
			}
		}
		
		public System.Data.Linq.Table<BackupWorker> BackupWorkers
		{
			get
			{
				return this.GetTable<BackupWorker>();
			}
		}
		
		public System.Data.Linq.Table<BackupWorkerStatus> BackupWorkerStatus
		{
			get
			{
				return this.GetTable<BackupWorkerStatus>();
			}
		}
		
		public System.Data.Linq.Table<BackupTask> BackupTasks
		{
			get
			{
				return this.GetTable<BackupTask>();
			}
		}
	}
	
	[Table(Name="dbo.BackupDepartments")]
	public partial class BackupDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _headmaster_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private string _title;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onheadmaster_idChanging(System.Nullable<int> value);
    partial void Onheadmaster_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupDepartment()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_headmaster_id", DbType="Int")]
		public System.Nullable<int> headmaster_id
		{
			get
			{
				return this._headmaster_id;
			}
			set
			{
				if ((this._headmaster_id != value))
				{
					this.Onheadmaster_idChanging(value);
					this.SendPropertyChanging();
					this._headmaster_id = value;
					this.SendPropertyChanged("headmaster_id");
					this.Onheadmaster_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BackupProjects")]
	public partial class BackupProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _project_manager_id;
		
		private string _title;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_manager_idChanging(System.Nullable<int> value);
    partial void Onproject_manager_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupProject()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_project_manager_id", DbType="Int")]
		public System.Nullable<int> project_manager_id
		{
			get
			{
				return this._project_manager_id;
			}
			set
			{
				if ((this._project_manager_id != value))
				{
					this.Onproject_manager_idChanging(value);
					this.SendPropertyChanging();
					this._project_manager_id = value;
					this.SendPropertyChanged("project_manager_id");
					this.Onproject_manager_idChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="VarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BackupUsers")]
	public partial class BackupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login_name;
		
		private string _password;
		
		private int _level;
		
		private System.Nullable<int> _worker_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onlogin_nameChanging(string value);
    partial void Onlogin_nameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void Onworker_idChanging(System.Nullable<int> value);
    partial void Onworker_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupUser()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_login_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string login_name
		{
			get
			{
				return this._login_name;
			}
			set
			{
				if ((this._login_name != value))
				{
					this.Onlogin_nameChanging(value);
					this.SendPropertyChanging();
					this._login_name = value;
					this.SendPropertyChanged("login_name");
					this.Onlogin_nameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[Column(Storage="_worker_id", DbType="Int")]
		public System.Nullable<int> worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BackupWorkers")]
	public partial class BackupWorker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _surname;
		
		private System.Nullable<int> _department_id;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void Ondepartment_idChanging(System.Nullable<int> value);
    partial void Ondepartment_idChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupWorker()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[Column(Storage="_department_id", DbType="Int")]
		public System.Nullable<int> department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BackupWorkerStatus")]
	public partial class BackupWorkerStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _worker_id;
		
		private int _year;
		
		private int _month;
		
		private int _status;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onworker_idChanging(int value);
    partial void Onworker_idChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnmonthChanging(int value);
    partial void OnmonthChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupWorkerStatus()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_worker_id", DbType="Int NOT NULL")]
		public int worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[Column(Storage="_month", DbType="Int NOT NULL")]
		public int month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BackupTasks")]
	public partial class BackupTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _project_id;
		
		private int _project_participant_id;
		
		private int _year;
		
		private int _month;
		
		private int _worked_hours;
		
		private System.Nullable<System.DateTime> _deleted;
		
		private System.Nullable<int> _deleted_by_id;
		
		private int _uid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_idChanging(int value);
    partial void Onproject_idChanged();
    partial void Onproject_participant_idChanging(int value);
    partial void Onproject_participant_idChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    partial void OnmonthChanging(int value);
    partial void OnmonthChanged();
    partial void Onworked_hoursChanging(int value);
    partial void Onworked_hoursChanged();
    partial void OndeletedChanging(System.Nullable<System.DateTime> value);
    partial void OndeletedChanged();
    partial void Ondeleted_by_idChanging(System.Nullable<int> value);
    partial void Ondeleted_by_idChanged();
    partial void OnuidChanging(int value);
    partial void OnuidChanged();
    #endregion
		
		public BackupTask()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_project_id", DbType="Int NOT NULL")]
		public int project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[Column(Storage="_project_participant_id", DbType="Int NOT NULL")]
		public int project_participant_id
		{
			get
			{
				return this._project_participant_id;
			}
			set
			{
				if ((this._project_participant_id != value))
				{
					this.Onproject_participant_idChanging(value);
					this.SendPropertyChanging();
					this._project_participant_id = value;
					this.SendPropertyChanged("project_participant_id");
					this.Onproject_participant_idChanged();
				}
			}
		}
		
		[Column(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[Column(Storage="_month", DbType="Int NOT NULL")]
		public int month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[Column(Storage="_worked_hours", DbType="Int NOT NULL")]
		public int worked_hours
		{
			get
			{
				return this._worked_hours;
			}
			set
			{
				if ((this._worked_hours != value))
				{
					this.Onworked_hoursChanging(value);
					this.SendPropertyChanging();
					this._worked_hours = value;
					this.SendPropertyChanged("worked_hours");
					this.Onworked_hoursChanged();
				}
			}
		}
		
		[Column(Storage="_deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[Column(Storage="_deleted_by_id", DbType="Int")]
		public System.Nullable<int> deleted_by_id
		{
			get
			{
				return this._deleted_by_id;
			}
			set
			{
				if ((this._deleted_by_id != value))
				{
					this.Ondeleted_by_idChanging(value);
					this.SendPropertyChanging();
					this._deleted_by_id = value;
					this.SendPropertyChanged("deleted_by_id");
					this.Ondeleted_by_idChanged();
				}
			}
		}
		
		[Column(Storage="_uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
