#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="Prat2")]
public partial class MainDBDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InsertNew(New instance);
  partial void UpdateNew(New instance);
  partial void DeleteNew(New instance);
  partial void InsertUserConfig(UserConfig instance);
  partial void UpdateUserConfig(UserConfig instance);
  partial void DeleteUserConfig(UserConfig instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertOrderLine(OrderLine instance);
  partial void UpdateOrderLine(OrderLine instance);
  partial void DeleteOrderLine(OrderLine instance);
  #endregion
	
	public MainDBDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Prat2ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public MainDBDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDBDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MainDBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<Comment> Comments
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<New> News
	{
		get
		{
			return this.GetTable<New>();
		}
	}
	
	public System.Data.Linq.Table<UserConfig> UserConfigs
	{
		get
		{
			return this.GetTable<UserConfig>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<OrderLine> OrderLines
	{
		get
		{
			return this.GetTable<OrderLine>();
		}
	}
	
	public System.Data.Linq.Table<UserPersonalInfo> UserPersonalInfos
	{
		get
		{
			return this.GetTable<UserPersonalInfo>();
		}
	}
}

[Table(Name="dbo.Categories")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<New> _News;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Category()
	{
		this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
		OnCreated();
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Category_New", Storage="_News", ThisKey="Name", OtherKey="Category")]
	public EntitySet<New> News
	{
		get
		{
			return this._News;
		}
		set
		{
			this._News.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_News(New entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = this;
	}
	
	private void detach_News(New entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = null;
	}
}

[Table(Name="dbo.Comments")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _NewID;
	
	private string _Text;
	
	private string _Creator;
	
	private System.Nullable<System.DateTime> _CeateDate;
	
	private EntityRef<New> _New;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNewIDChanging(System.Nullable<int> value);
    partial void OnNewIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnCeateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCeateDateChanged();
    #endregion
	
	public Comment()
	{
		this._New = default(EntityRef<New>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_NewID", DbType="Int")]
	public System.Nullable<int> NewID
	{
		get
		{
			return this._NewID;
		}
		set
		{
			if ((this._NewID != value))
			{
				if (this._New.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNewIDChanging(value);
				this.SendPropertyChanging();
				this._NewID = value;
				this.SendPropertyChanged("NewID");
				this.OnNewIDChanged();
			}
		}
	}
	
	[Column(Storage="_Text", DbType="VarChar(MAX)")]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[Column(Storage="_Creator", DbType="VarChar(256)")]
	public string Creator
	{
		get
		{
			return this._Creator;
		}
		set
		{
			if ((this._Creator != value))
			{
				this.OnCreatorChanging(value);
				this.SendPropertyChanging();
				this._Creator = value;
				this.SendPropertyChanged("Creator");
				this.OnCreatorChanged();
			}
		}
	}
	
	[Column(Storage="_CeateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CeateDate
	{
		get
		{
			return this._CeateDate;
		}
		set
		{
			if ((this._CeateDate != value))
			{
				this.OnCeateDateChanging(value);
				this.SendPropertyChanging();
				this._CeateDate = value;
				this.SendPropertyChanged("CeateDate");
				this.OnCeateDateChanged();
			}
		}
	}
	
	[Association(Name="New_Comment", Storage="_New", ThisKey="NewID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public New New
	{
		get
		{
			return this._New.Entity;
		}
		set
		{
			New previousValue = this._New.Entity;
			if (((previousValue != value) 
						|| (this._New.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._New.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._New.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._NewID = value.id;
				}
				else
				{
					this._NewID = default(Nullable<int>);
				}
				this.SendPropertyChanged("New");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.News")]
public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Title;
	
	private string _Body;
	
	private System.Nullable<System.DateTime> _CreateDate;
	
	private System.Nullable<System.DateTime> _LastModifiedDate;
	
	private string _Creator;
	
	private string _Category;
	
	private EntitySet<Comment> _Comments;
	
	private EntityRef<Category> _Category1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
	
	public New()
	{
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._Category1 = default(EntityRef<Category>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="VarChar(200)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Body", DbType="VarChar(MAX)")]
	public string Body
	{
		get
		{
			return this._Body;
		}
		set
		{
			if ((this._Body != value))
			{
				this.OnBodyChanging(value);
				this.SendPropertyChanging();
				this._Body = value;
				this.SendPropertyChanged("Body");
				this.OnBodyChanged();
			}
		}
	}
	
	[Column(Storage="_CreateDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[Column(Storage="_LastModifiedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastModifiedDate
	{
		get
		{
			return this._LastModifiedDate;
		}
		set
		{
			if ((this._LastModifiedDate != value))
			{
				this.OnLastModifiedDateChanging(value);
				this.SendPropertyChanging();
				this._LastModifiedDate = value;
				this.SendPropertyChanged("LastModifiedDate");
				this.OnLastModifiedDateChanged();
			}
		}
	}
	
	[Column(Storage="_Creator", DbType="VarChar(256)")]
	public string Creator
	{
		get
		{
			return this._Creator;
		}
		set
		{
			if ((this._Creator != value))
			{
				this.OnCreatorChanging(value);
				this.SendPropertyChanging();
				this._Creator = value;
				this.SendPropertyChanged("Creator");
				this.OnCreatorChanged();
			}
		}
	}
	
	[Column(Storage="_Category", DbType="VarChar(50)")]
	public string Category
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				if (this._Category1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("Category");
				this.OnCategoryChanged();
			}
		}
	}
	
	[Association(Name="New_Comment", Storage="_Comments", ThisKey="id", OtherKey="NewID")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[Association(Name="Category_New", Storage="_Category1", ThisKey="Category", OtherKey="Name", IsForeignKey=true, DeleteRule="CASCADE")]
	public Category Category1
	{
		get
		{
			return this._Category1.Entity;
		}
		set
		{
			Category previousValue = this._Category1.Entity;
			if (((previousValue != value) 
						|| (this._Category1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category1.Entity = null;
					previousValue.News.Remove(this);
				}
				this._Category1.Entity = value;
				if ((value != null))
				{
					value.News.Add(this);
					this._Category = value.Name;
				}
				else
				{
					this._Category = default(string);
				}
				this.SendPropertyChanged("Category1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.New = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.New = null;
	}
}

[Table(Name="dbo.UserConfigs")]
public partial class UserConfig : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Username;
	
	private string _Theme;
	
	private string _Language;
	
	private string _Culture;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnCultureChanging(string value);
    partial void OnCultureChanged();
    #endregion
	
	public UserConfig()
	{
		OnCreated();
	}
	
	[Column(Storage="_Username", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_Theme", DbType="VarChar(50)")]
	public string Theme
	{
		get
		{
			return this._Theme;
		}
		set
		{
			if ((this._Theme != value))
			{
				this.OnThemeChanging(value);
				this.SendPropertyChanging();
				this._Theme = value;
				this.SendPropertyChanged("Theme");
				this.OnThemeChanged();
			}
		}
	}
	
	[Column(Storage="_Language", DbType="VarChar(50)")]
	public string Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[Column(Storage="_Culture", DbType="VarChar(50)")]
	public string Culture
	{
		get
		{
			return this._Culture;
		}
		set
		{
			if ((this._Culture != value))
			{
				this.OnCultureChanging(value);
				this.SendPropertyChanging();
				this._Culture = value;
				this.SendPropertyChanged("Culture");
				this.OnCultureChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _Name;
	
	private decimal _Price;
	
	private string _Currency;
	
	private System.Data.Linq.Binary _Picture;
	
	private string _Category;
	
	private EntitySet<OrderLine> _OrderLines;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
	
	public Product()
	{
		this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_Currency", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string Currency
	{
		get
		{
			return this._Currency;
		}
		set
		{
			if ((this._Currency != value))
			{
				this.OnCurrencyChanging(value);
				this.SendPropertyChanging();
				this._Currency = value;
				this.SendPropertyChanged("Currency");
				this.OnCurrencyChanged();
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[Column(Storage="_Category", DbType="VarChar(50)")]
	public string Category
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				this.OnCategoryChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("Category");
				this.OnCategoryChanged();
			}
		}
	}
	
	[Association(Name="Product_OrderLine", Storage="_OrderLines", ThisKey="id", OtherKey="ProductID")]
	public EntitySet<OrderLine> OrderLines
	{
		get
		{
			return this._OrderLines;
		}
		set
		{
			this._OrderLines.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[Table(Name="dbo.[Order]")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _Status;
	
	private string _Person;
	
	private System.Nullable<System.DateTime> _OrderDate;
	
	private System.Nullable<System.DateTime> _ConfirmDate;
	
	private string _Description;
	
	private EntitySet<OrderLine> _OrderLines;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnPersonChanging(string value);
    partial void OnPersonChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnConfirmDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Order()
	{
		this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_Status", DbType="Int NOT NULL")]
	public int Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[Column(Storage="_Person", DbType="VarChar(256)")]
	public string Person
	{
		get
		{
			return this._Person;
		}
		set
		{
			if ((this._Person != value))
			{
				this.OnPersonChanging(value);
				this.SendPropertyChanging();
				this._Person = value;
				this.SendPropertyChanged("Person");
				this.OnPersonChanged();
			}
		}
	}
	
	[Column(Storage="_OrderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[Column(Storage="_ConfirmDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ConfirmDate
	{
		get
		{
			return this._ConfirmDate;
		}
		set
		{
			if ((this._ConfirmDate != value))
			{
				this.OnConfirmDateChanging(value);
				this.SendPropertyChanging();
				this._ConfirmDate = value;
				this.SendPropertyChanged("ConfirmDate");
				this.OnConfirmDateChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Order_OrderLine", Storage="_OrderLines", ThisKey="id", OtherKey="OrderID")]
	public EntitySet<OrderLine> OrderLines
	{
		get
		{
			return this._OrderLines;
		}
		set
		{
			this._OrderLines.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[Table(Name="dbo.OrderLine")]
public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _OrderID;
	
	private System.Nullable<int> _ProductID;
	
	private System.Nullable<int> _Count;
	
	private EntityRef<Order> _Order;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    #endregion
	
	public OrderLine()
	{
		this._Order = default(EntityRef<Order>);
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[Column(Storage="_OrderID", DbType="Int")]
	public System.Nullable<int> OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductID", DbType="Int")]
	public System.Nullable<int> ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[Column(Storage="_Count", DbType="Int")]
	public System.Nullable<int> Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this.OnCountChanging(value);
				this.SendPropertyChanging();
				this._Count = value;
				this.SendPropertyChanged("Count");
				this.OnCountChanged();
			}
		}
	}
	
	[Association(Name="Order_OrderLine", Storage="_Order", ThisKey="OrderID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.OrderLines.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.OrderLines.Add(this);
					this._OrderID = value.id;
				}
				else
				{
					this._OrderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	[Association(Name="Product_OrderLine", Storage="_Product", ThisKey="ProductID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.OrderLines.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.OrderLines.Add(this);
					this._ProductID = value.id;
				}
				else
				{
					this._ProductID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserPersonalInfo")]
public partial class UserPersonalInfo
{
	
	private string _UserName;
	
	private string _Name;
	
	private string _Surname;
	
	private string _City;
	
	private string _EMail;
	
	public UserPersonalInfo()
	{
	}
	
	[Column(Storage="_UserName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this._Name = value;
			}
		}
	}
	
	[Column(Storage="_Surname", DbType="VarChar(50)")]
	public string Surname
	{
		get
		{
			return this._Surname;
		}
		set
		{
			if ((this._Surname != value))
			{
				this._Surname = value;
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(50)")]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this._City = value;
			}
		}
	}
	
	[Column(Storage="_EMail", DbType="VarChar(50)")]
	public string EMail
	{
		get
		{
			return this._EMail;
		}
		set
		{
			if ((this._EMail != value))
			{
				this._EMail = value;
			}
		}
	}
}
#pragma warning restore 1591
